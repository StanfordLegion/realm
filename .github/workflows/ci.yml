name: ci

on:
  push:
    branches-ignore:
      - gh-pages
  pull_request:
    branches-ignore:
      - gh-pages

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build:
    name: ${{ matrix.config.os }}-${{ matrix.config.cc }}-${{ matrix.config.cuda }}-${{ matrix.config.build }}
    runs-on: ${{ matrix.config.os }}
    env:
      CPM_SOURCE_CACHE: "${{ github.workspace }}/.cache/cpm"
      CCACHE_BASEDIR: ${{ github.workspace }}
      CCACHE_COMPRESS: "true"
      CCACHE_COMPRESS_LEVEL: "6"
    strategy:
      fail-fast: false
      matrix:
        config:
          - {
              os: windows-latest,
              build: Release,
              cc: "cl", cxx: "cl",
              ccache: sccache,
              cuda: ''
            }
          - {
              os: ubuntu-24.04-arm,
              build: Release,
              cc: "gcc", cxx: "g++",
              ccache: ccache,
              cuda: ''
            }
          - {
              os: ubuntu-24.04-arm,
              build: Release,
              cc: "clang", cxx: "clang++",
              ccache: ccache,
              cuda: ''
            }
          - {
              os: ubuntu-latest,
              build: Release,
              cc: "gcc", cxx: "g++",
              ccache: ccache,
              cuda: ''
            }
          - {
              os: ubuntu-latest,
              build: Release,
              cc: "gcc", cxx: "g++",
              ccache: ccache,
              cuda: '12.9.0'
            }
          - {
              os: ubuntu-latest,
              build: Release,
              cc: "clang", cxx: "clang++",
              ccache: ccache,
              cuda: ''
            }
          - {
              os: ubuntu-latest,
              build: Debug,
              cc: "gcc", cxx: "g++",
              ccache: ccache,
              cuda: ''
            }
          - {
              os: macos-latest,
              build: Release,
              cc: "clang", cxx: "clang++",
              ccache: ccache,
              cuda: ''
            }
    steps:
      - uses: actions/checkout@v4.2.2

      - uses: Kaven-Universe/github-action-current-date-time@v1
        name: Get Timestamp
        id: timestamp
        with:
          format: "yyyy-MM-dd-HH-mm-ss-SSS"

      - uses: awalsh128/cache-apt-pkgs-action@latest
        name: Get Linux Packages
        if: ${{ matrix.config.os == 'ubuntu-latest' }}
        with:
          packages: ${{ matrix.config.cc }} ${{ matrix.config.cxx }} ccache

      - uses: Jimver/cuda-toolkit@v0.2.25
        name: Get CUDA
        if: ${{ matrix.config.cuda != '' }}
        with:
          cuda: ${{ matrix.config.cuda }}
          sub-packages: '["nvcc", "cudart-dev", "cupti-dev", "nvtx", "nvml-dev"]'
          method: 'network'

      - uses: actions/cache@v4
        name: Restore CPM source cache
        with:
          path: .cache/cpm
          key: cpm-${{ steps.timestamp.outputs.time }}
          restore-keys: |
            cpm-

      - uses: actions/cache@v4
        name: Restore deps cache
        with:
          path: |
            build/_deps/ucx
            build/_deps/ucc
            build/_deps/gasnet
          key: deps-${{ matrix.config.os }}-${{ matrix.config.cc }}-${{ matrix.config.cuda }}-${{ steps.timestamp.outputs.time }}
          restore-keys: |
            deps-${{ matrix.config.os }}-${{ matrix.config.cc }}-${{ matrix.config.cuda }}-

      - uses: hendrikmuhs/ccache-action@v1.2
        name: Restore ccache Cache
        with:
          variant: ${{ matrix.config.ccache }}
          append-timestamp: true

          key: ${{ matrix.config.os }}-${{ matrix.config.cc }}-${{ matrix.config.cuda }}-${{ matrix.config.build }}-${{ github.ref_name }}
          restore-keys: |
            ${{ matrix.config.os }}-${{ matrix.config.cc }}-${{ matrix.config.cuda }}-${{ matrix.config.build }}-${{ github.ref_name }}
            ${{ matrix.config.os }}-${{ matrix.config.cc }}-${{ matrix.config.cuda }}-${{ matrix.config.build }}-main

      - uses: microsoft/setup-msbuild@v2
        name: Setup Windows Build Environment
        if: ${{ matrix.config.os == 'windows-latest' }}

      - uses: lukka/get-cmake@latest

      - name: Check for GPU
        if: ${{ matrix.config.cuda != '' }}
        id: check_gpu
        run: |
          set +e
          which nvidia-smi && (nvidia-smi -L | grep 'GPU 0')
          echo no_gpu=$? >> $GITHUB_OUTPUT

      - name: Configure
        run:
          cmake -S . -B build
                -DCMAKE_C_COMPILER=${{ matrix.config.cc }}
                -DCMAKE_CXX_COMPILER=${{ matrix.config.cxx }}
                -DCMAKE_C_COMPILER_LAUNCHER=${{ matrix.config.ccache }}
                -DCMAKE_CXX_COMPILER_LAUNCHER=${{ matrix.config.ccache }}
                -DCMAKE_BUILD_TYPE=${{ matrix.config.build }}
                -DREALM_BUILD_TESTS=ON -DREALM_BUILD_BENCHMARKS=ON -DREALM_BUILD_TUTORIALS=ON -DREALM_BUILD_EXAMPLES=ON
                -DREALM_ENABLE_GASNETEX=OFF

      - name: Build
        run: |
          cmake --build build --parallel 4 --config ${{ matrix.config.build }}

      - name: Run Tests
        if: matrix.config.cuda == '' || steps.check_gpu.outputs.no_gpu != '1'
        run:
          ctest --output-junit ${{ github.workspace }}/${{ github.sha }}-results.xml
                --test-dir build
                --build-config ${{ matrix.config.build }}
                --output-on-failure
                --timeout 240
                --parallel 4
      
      - uses: test-summary/action@v2
        name: Upload Test Results
        if: always() && (matrix.config.cuda == '' || steps.check_gpu.outputs.no_gpu == '0')
        with:
          paths: "${{ github.workspace }}/${{ github.sha }}-results.xml"

      - name: Test Install
        run: |
          cmake --install build --parallel 4 --prefix install --config ${{ matrix.config.build }}

  docs:
    name: Build Docs
    runs-on: ubuntu-latest
    needs: build
    permissions:
      contents: write
    strategy:
      fail-fast: false
    steps:
      - uses: awalsh128/cache-apt-pkgs-action@latest
        name: Get Linux Packages
        with:
          packages: doxygen doxygen-latex graphviz cmake

      - uses: actions/checkout@v4.2.2
        with:
          path: realm-src

      - name: Get Safe Ref Name
        id: safe
        run: |
          echo ref=${GITHUB_REF_NAME//\//-} >> ${GITHUB_OUTPUT}

      - name: Build
        run: |
          cmake -S realm-src -B build -DCMAKE_BUILD_TYPE=Release -DREALM_ENABLE_UCX=OFF -DREALM_ENABLE_GASNETEX=OFF -DREALM_BUILD_DOCS=ON -DREALM_GENERATE_HTML=ON
          make -C build docs
          cmake --install build --component Realm_doc --prefix install

      - uses: actions/upload-artifact@v4
        with:
          name: docs-${{ steps.safe.outputs.ref }}
          path: install
          if-no-files-found: error
          retention-days: 2
          overwrite: true

      - uses: actions/checkout@v4.2.2
        if: ${{ github.event_name == 'push' && (github.ref_name == 'main' || startsWith(github.ref, 'refs/tags/v')) }}
        with:
          ref: gh-pages
          path: gh-pages

      - name: Publish Docs and Tutorials
        if: ${{ github.event_name == 'push' && (github.ref_name == 'main' || startsWith(github.ref, 'refs/tags/v')) }}
        run: |
          rm -rf gh-pages/doc/${{ steps.safe.outputs.ref }}*
          mv install/share/doc/Realm/realm-* gh-pages/doc/${{ steps.safe.outputs.ref }}
          cp realm-src/tutorials/*/*.md gh-pages/_tutorials
          cd gh-pages
          (cd doc && find * -maxdepth 0 -type d | sort --version-sort) > doc/doc-versions
          git config --global user.name "GitHub Docs Builder"
          git config --global user.email "docs-builder@users.noreply.github.com"
          git add doc/${{ steps.safe.outputs.ref }} doc/doc-versions _tutorials
          git status
          git commit --allow-empty -m "Update docs and tutorials for ${{ github.ref_name }}"
          git fetch origin
          git rebase --strategy-option=theirs origin/gh-pages --verbose
          git push --verbose
