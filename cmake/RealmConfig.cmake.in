# Copyright 2025 Stanford University, NVIDIA Corporation
# SPDX-License-Identifier: Apache-2.0
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

set(REALM_VERSION @Realm_VERSION@)

@PACKAGE_INIT@

# Allow the application developer to choose between static and shared libraries
# if available by specifying 'static' or 'shared' component in find_package

set(Realm_known_comps static shared cuda nvtx hip kokkos aio shm llvm hdf5 omp
                      prealm hwloc python papi cpptrace rdtsc gasnet ucx mpi)
set(Realm_static_comp NO)
set(Realm_shared_comp NO)
foreach(_comp IN LISTS ${CMAKE_FIND_PACKAGE_NAME}_COMPONENTS)
  if(_comp IN_LIST Realm_known_comps)
    set(Realm_${_comp}_comp YES)
  else()
    set(${CMAKE_FIND_PACKAGE_NAME}_NOT_FOUND_MESSAGE
        "${CMAKE_FIND_PACKAGE_NAME} does not recognize ${_comp}"
    )
    set(${CMAKE_FIND_PACKAGE_NAME}_FOUND FALSE)
    return()
  endif()
endforeach()

if(Realm_static_comp AND Realm_shared_comp)
  set(${CMAKE_FIND_PACKAGE_NAME}_NOT_FOUND_MESSAGE
      "${CMAKE_FIND_PACKAGE_NAME} cannot request static and shared simultaneously"
  )
  set(${CMAKE_FIND_PACKAGE_NAME}_FOUND FALSE)
  return()
endif()

# Compile-time feature components
# We expose these features as the original CMakeLists.txt variable in
# order to maintain compatibility if the app decides to use add_subdirectory
# or find_package, no other cmake changes are needed.
set(REALM_USE_CUDA @REALM_USE_CUDA@)
set(REALM_USE_NVTX @REALM_USE_NVTX@)
set(REALM_USE_HIP @REALM_USE_HIP@)
set(REALM_USE_KOKKOS @REALM_USE_KOKKOS@)
set(REALM_USE_KERNEL_AIO @REALM_USE_KERNEL_AIO@)
set(REALM_USE_SHM @REALM_USE_SHM@)
set(REALM_USE_LLVM @REALM_USE_LLVM@)
set(REALM_USE_HDF5 @REALM_USE_HDF5@)
set(REALM_USE_OPENMP @REALM_USE_OPENMP@)
set(REALM_USE_PREALM @REALM_USE_PREALM@)
set(REALM_USE_HWLOC @REALM_USE_HWLOC@)
set(REALM_USE_PYTHON @REALM_USE_PYTHON@)
set(REALM_USE_PAPI @REALM_USE_PAPI@)
set(REALM_USE_CPPTRACE @REALM_USE_CPPTRACE@)
set(REALM_TIMERS_USE_RDTSC @REALM_TIMERS_USE_RDTSC@)
set(REALM_USE_GASNET @REALM_USE_GASNET@)
set(REALM_USE_UCX @REALM_USE_UCX@)
set(REALM_USE_MPI @REALM_USE_MPI@)

# And now expose them as proper cmake components that can be requested via
# find_package(Realm COMPONENTS xxx)
foreach(feature cuda nvtx hip kokkos kernel_aio shm llvm hdf5 openmp
        prealm hwloc python papi cpptrace gasnet ucx mpi)
  string(TOUPPER "${feature}" upper_feature)
  if(REALM_USE_${upper_feature})
    set(Realm_${feature}_FOUND ON)
  endif()
endforeach()
# rdtsc is special
if(REALM_TIMERS_USE_RDTSC)
  set(Realm_rdtsc_FOUND ON)
endif()

include(CMakeFindDependencyMacro)
# Use our installed find_package modules as a last resort
list(APPEND CMAKE_MODULE_PATH "${CMAKE_CURRENT_LIST_DIR}")

# If Kokkos was used, it needs to be found regardless of shared or static since
# it's (unfortunately) part of the interface
# TODO(cperry): move this to be header only / optional, maybe after the c++ api
#               is implemented on top of the c api
if(REALM_USE_KOKKOS)
  find_dependency(Kokkos)
endif()

macro(Realm_load_targets type)
  if(NOT EXISTS "${CMAKE_CURRENT_LIST_DIR}/Realm-${type}-targets.cmake")
    set(${CMAKE_FIND_PACKAGE_NAME}_NOT_FOUND_MESSAGE
        "${CMAKE_FIND_PACKAGE_NAME} '${type}' libraries requested, but not found"
    )
    set(${CMAKE_FIND_PACKAGE_NAME}_FOUND FALSE)
    return()
  endif()
  if(${type} STREQUAL "static")
    # Find all the static library dependencies needed
    # Use the installed Find* modules as a last resort for dependencies
    foreach(_dep @REALM_STATIC_DEPENDS@)
      find_dependency(${_dep})
    endforeach()
  endif()

  include("${CMAKE_CURRENT_LIST_DIR}/Realm-${type}-targets.cmake")
  set(${CMAKE_FIND_PACKAGE_NAME}_${type}_FOUND TRUE)
endmacro()

# If the user specified a static or shared, use that, otherwise guess with a reasonable default
if(Realm_static_comp)
  realm_load_targets(static)
elseif(Realm_shared_comp)
  realm_load_targets(shared)
elseif(BUILD_SHARED_LIBS)
  if(EXISTS "${CMAKE_CURRENT_LIST_DIR}/Realm-shared-targets.cmake")
    realm_load_targets(shared)
  else()
    realm_load_targets(static)
  endif()
else()
  if(EXISTS "${CMAKE_CURRENT_LIST_DIR}/Realm-static-targets.cmake")
    realm_load_targets(static)
  else()
    realm_load_targets(shared)
  endif()
endif()

check_required_components(Realm)
